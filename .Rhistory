name <- paste("<b>", power_station_coords$Station[i], "</b>", sep="")
latitude <- paste("Latitude: ", power_station_coords$Latitude[i], sep="")
longitude <- paste("Longitude: ", power_station_coords$Longitude[i], sep="")
content <- paste(sep = "<br/>",
name,
latitude,
longitude)
power_station_coords$content = content
power_station_coords$content[i] = content
power_station_coords <- read_excel("Power Station Coordinates.xlsx") #Power Station coordinates
power_station_coords$affected_radius = 0
power_station_coords$content = NA
name <- paste("<b>", power_station_coords$Station[i], "</b>", sep="")
latitude <- paste("Latitude: ", power_station_coords$Latitude[i], sep="")
longitude <- paste("Longitude: ", power_station_coords$Longitude[i], sep="")
content <- paste(sep = "<br/>",
name,
latitude,
longitude)
power_station_coords$content[i] = content
runApp()
shiny::runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
choices[-1]
append(choices[-1], "Eastern")
choices[-1]
choices
runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
alloc <- function(num_panels = 100000, equity = 0, region = "all"){
library(readxl)
final_mev <- read_excel("final_mev.xlsx", col_names=TRUE)
lambda1 = 72.93
lambda2 = 0.774463
lambda3 = 30862
lambda = 54.2
num_panels = as.integer(num_panels)
if(region == "all"){
data = data.frame(final_mev)
}
else{
data = data.frame(final_mev[final_mev$region == region])
}
i = num_panels
df = data
if(equity == 1){
i = (num_panels)/2
df$panels = i/nrow(df)
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
return(df)
}
else if(equity == 0){
df$panels = 0
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
return(df)
}
}
print(alloc())
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
print(alloc(10000, 1, c("WR", "NR")))
alloc <- function(num_panels = 100000, equity = 0, region = "all"){
library(readxl)
final_mev <- read_excel("final_mev_india.xlsx", col_names=TRUE)
lambda1 = 72.93
lambda2 = 0.774463
lambda3 = 30862
lambda = 54.2
num_panels = as.integer(num_panels)
if(region == "all"){
data = data.frame(final_mev)
}
else{
print(region)
data = data.frame(final_mev[(final_mev$region %in% region) == TRUE,])
}
i = num_panels
df = data
if(equity == 1){
print("Allocating equitably...")
i = (num_panels)/2
df$panels = i/nrow(df)
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
else if(equity == 0){
print("Allocating efficiently...")
df$panels = 0
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
print("Allocation complete!")
return(df)
}
print(alloc(10000, 1, c("WR", "NR")))
alloc <- function(num_panels = 100000, equity = 0, region = "all"){
library(readxl)
final_mev <- read_excel("final_mev_india.xlsx", col_names=TRUE)
lambda1 = 72.93
lambda2 = 0.774463
lambda3 = 30862
lambda = 54.2
num_panels = as.integer(num_panels)
if(region == "all"){
data = data.frame(final_mev)
}
else{
data = data.frame(final_mev[(final_mev$region %in% region) == TRUE,])
}
i = num_panels
df = data
if(equity == 1){
print("Allocating equitably...")
i = (num_panels)/2
df$panels = i/nrow(df)
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
else if(equity == 0){
print("Allocating efficiently...")
df$panels = 0
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
print("Allocation complete!")
return(df)
}
print(alloc(10000, 1, c("WR", "NR")))
alloc <- function(num_panels = 100000, equity = 0, region = "all"){
library(readxl)
final_mev <- read_excel("final_mev_india.xlsx", col_names=TRUE)
lambda1 = 72.93
lambda2 = 0.774463
lambda3 = 30862
lambda = 54.2
num_panels = as.integer(num_panels)
if(region == "all"){
data = data.frame(final_mev)
}
else{
print(region)
data = data.frame(final_mev[(final_mev$region %in% region) == TRUE,])
}
i = num_panels
df = data
if(equity == 1){
print("Allocating equitably...")
i = (num_panels)/2
df$panels = i/nrow(df)
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
else if(equity == 0){
print("Allocating efficiently...")
df$panels = 0
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
print("Allocation complete!")
return(df)
}
x = alloc(10000, 1, c("WR", "NR"))
num_panels = 100000
alloc()
alloc <- function(num_panels = 100000, equity = 0, region = "all"){
final_mev <- read_excel("final_mev_india.xlsx", col_names=TRUE)
lambda1 = 72.93
lambda2 = 0.774463
lambda3 = 30862
lambda = 54.2
num_panels = as.integer(num_panels)
if(region == "all"){
data = data.frame(final_mev)
}
else{
print(region)
data = data.frame(final_mev[(final_mev$region %in% region) == TRUE,])
}
i = num_panels
df = data
if(equity == 1){
print("Allocating equitably...")
i = (num_panels)/2
df$panels = i/nrow(df)
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
else if(equity == 0){
print("Allocating efficiently...")
df$panels = 0
while(i > 0) {
df = df[order(-df$MEV),]
#print(df)
df$MEV[1] = df$MEV[1] - lambda
df$panels[1] = df$panels[1] + 1
i = i - 1
}
}
print("Allocation complete!")
return(df)
}
alloc()
alloc(num_panels = 50)
alloc(num_panels = 50, equity = 1)
alloc(num_panels = 50, equity = 1, region = "all")
alloc(num_panels = 50, equity = 1, region = c("Northern"))
alloc(num_panels = 50, equity = 1, region = c("Southern"))
alloc(num_panels = 50, equity = 1, region = c("Southern", "Northern"))
alloc(10000, 1, c("Western", "Northern"))
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
station_monthly <- read_excel("station_monthly.xlsx")
View(station_monthly)
month_prod_file <- read_excel("station_monthly.xlsx")
View(month_prod_file)
month_prod_file <- read_excel("station_monthly.xlsx")
View(month_prod_file)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
